var Board = React.createClass({    getInitialState: function(){        return {            baseColors: [                "blue",                "red",                "green",                "yellow",                "black",                "white",                "orange",                "purple"            ],            correctColors: ["", "", "", "", ""],            fakeCorrectColors: ["", "", "", "", ""],            printPrevRounds: [                ["","","","",""],                ["","","","",""],                ["","","","",""],                ["","","","",""],                ["","","","",""],                ["","","","",""],                ["","","","",""],                ["","","","",""],                ["","","","",""],                ["","","","",""]            ],            printIndication: [                ["",""],                ["",""],                ["",""],                ["",""],                ["",""],                ["",""],                ["",""],                ["",""],                ["",""],                ["",""]            ],            printCorrectColors: [                ["", "", "", "", ""]            ],            colorPicker: ["", "", "", "", ""],            position: 0,            roundCounter: 0,            hiddenButton: "none"        }    },    componentWillMount: function(){        for(var i = 0 ; i < 5 ; i++){            var randomNumber = Math.floor(Math.random() * 8);            this.state.correctColors[i] = this.state.baseColors[randomNumber];        }        console.log("Correct: " + this.state.correctColors);        //add the right color to td-elements        var tdList = document.getElementsByTagName("td");        console.log(tdList);        return this.state.correctColors;    },    setPosition: function(positionFromChild){        this.setState({            position: positionFromChild        });    },    addColor: function(color){        this.state.colorPicker[this.state.position] = color;        this.state.position += 1;        this.setState({            colorPicker: this.state.colorPicker.concat([color])        });        if(this.state.colorPicker.indexOf("") == -1){            this.setState({                hiddenButton: "block"            });        }    },    compareWords: function(){        var correctAnswers = 0;        var wrongPosAnswer = 0;        for(var i = 0 ; i < 5 ; i++){            this.state.fakeCorrectColors[i] = this.state.correctColors[i];        }        console.log("Fake: " + this.state.fakeCorrectColors);        for(i = 0 ; i < this.state.correctColors.length ; i++){            var comparing;            comparing = this.state.fakeCorrectColors.indexOf(this.state.colorPicker[i]); //index för färg som kontrolleras            console.log(correctAnswers + " - " + wrongPosAnswer);            if(this.state.correctColors[i] == this.state.colorPicker[i]){                //counts number of correct colors                correctAnswers += 1;                if(correctAnswers === 5){                    alert("Du hade alla rätt!");                }            }                //checks if color exists but at wrong position            else if(this.state.colorPicker.indexOf(this.state.fakeCorrectColors[i]) !== -1 &&                i !== comparing) {                wrongPosAnswer += 1;                this.state.fakeCorrectColors[comparing] = "";                console.log(this.state.fakeCorrectColors);            }            this.state.printPrevRounds[this.state.roundCounter][i] = this.state.colorPicker[i];            this.setState({                hiddenButton: "none",                colorPicker: ["","","","",""],                roundCounter: this.state.roundCounter + 1,                fakeCorrectColors: ["","","","",""]            })        }        this.state.printIndication[this.state.roundCounter][0] = correctAnswers;        this.state.printIndication[this.state.roundCounter][1] = wrongPosAnswer;        this.state.position = 0;    },    render: function(){        var okbuttonstyle = {            display: this.state.hiddenButton        };        var indicateRed = {            color: '#f0333b',            textShadow: '1px 1px 1px white',            WebkitTransition: 'all', // note the capital 'W' here            msTransition: 'all' // 'ms' is the only lowercase vendor prefix        };        var indicateGreen = {            color: '#00ac00',            textShadow: '1px 1px 1px white',            WebkitTransition: 'all', // note the capital 'W' here            msTransition: 'all' // 'ms' is the only lowercase vendor prefix        };        return <div>            <header>                <h1>Mastermind</h1>                <ul id="manual">                    <li>Find the correct colors by picking them from the palett and put them on the right spot!</li>                    <li>Every round gives a green indication if a color is correct                        and red if the color exist but in wrong place.</li>                    <li>Figure it out before you run out of rounds!</li>                </ul>            </header>            <div id="container">                <table id="gamefield">                <tr>                    <div id="facit">                    <th>Facit</th>                    <td>???</td>                    <td>???</td>                    <td>???</td>                    <td>???</td>                    <td>???</td>                    </div>                </tr>                <tr>                    <th>Gamearea</th>                    <Field setPosition={this.setPosition} position={0} color={this.state.colorPicker[0]}></Field>                    <Field setPosition={this.setPosition} position={1} color={this.state.colorPicker[1]}></Field>                    <Field setPosition={this.setPosition} position={2} color={this.state.colorPicker[2]}></Field>                    <Field setPosition={this.setPosition} position={3} color={this.state.colorPicker[3]}></Field>                    <Field setPosition={this.setPosition} position={4} color={this.state.colorPicker[4]}></Field>                </tr>                <tr>                    <th>1</th>                    <td>{this.state.printPrevRounds[0][0]}</td>                    <td>{this.state.printPrevRounds[0][1]}</td>                    <td>{this.state.printPrevRounds[0][2]}</td>                    <td>{this.state.printPrevRounds[0][3]}</td>                    <td>{this.state.printPrevRounds[0][4]}</td>                </tr>                <tr>                    <th>2</th>                    <td>{this.state.printPrevRounds[1][0]}</td>                    <td>{this.state.printPrevRounds[1][1]}</td>                    <td>{this.state.printPrevRounds[1][2]}</td>                    <td>{this.state.printPrevRounds[1][3]}</td>                    <td>{this.state.printPrevRounds[1][4]}</td>                </tr>                <tr>                    <th>3</th>                    <td>{this.state.printPrevRounds[2][0]}</td>                    <td>{this.state.printPrevRounds[2][1]}</td>                    <td>{this.state.printPrevRounds[2][2]}</td>                    <td>{this.state.printPrevRounds[2][3]}</td>                    <td>{this.state.printPrevRounds[2][4]}</td>                </tr>                <tr>                    <th>4</th>                    <td>{this.state.printPrevRounds[3][0]}</td>                    <td>{this.state.printPrevRounds[3][1]}</td>                    <td>{this.state.printPrevRounds[3][2]}</td>                    <td>{this.state.printPrevRounds[3][3]}</td>                    <td>{this.state.printPrevRounds[3][4]}</td>                </tr>                <tr>                    <th>5</th>                    <td>{this.state.printPrevRounds[4][0]}</td>                    <td>{this.state.printPrevRounds[4][1]}</td>                    <td>{this.state.printPrevRounds[4][2]}</td>                    <td>{this.state.printPrevRounds[4][3]}</td>                    <td>{this.state.printPrevRounds[4][4]}</td>                </tr>                <tr>                    <th>6</th>                    <td>{this.state.printPrevRounds[5][0]}</td>                    <td>{this.state.printPrevRounds[5][1]}</td>                    <td>{this.state.printPrevRounds[5][2]}</td>                    <td>{this.state.printPrevRounds[5][3]}</td>                    <td>{this.state.printPrevRounds[5][4]}</td>                </tr>                <tr>                    <th>7</th>                    <td>{this.state.printPrevRounds[6][0]}</td>                    <td>{this.state.printPrevRounds[6][1]}</td>                    <td>{this.state.printPrevRounds[6][2]}</td>                    <td>{this.state.printPrevRounds[6][3]}</td>                    <td>{this.state.printPrevRounds[6][4]}</td>                </tr>                <tr>                    <th>8</th>                    <td>{this.state.printPrevRounds[7][0]}</td>                    <td>{this.state.printPrevRounds[7][1]}</td>                    <td>{this.state.printPrevRounds[7][2]}</td>                    <td>{this.state.printPrevRounds[7][3]}</td>                    <td>{this.state.printPrevRounds[7][4]}</td>                </tr>                <tr>                    <th>9</th>                    <td>{this.state.printPrevRounds[8][0]}</td>                    <td>{this.state.printPrevRounds[8][1]}</td>                    <td>{this.state.printPrevRounds[8][2]}</td>                    <td>{this.state.printPrevRounds[8][3]}</td>                    <td>{this.state.printPrevRounds[8][4]}</td>                </tr>                <tr>                    <th>10</th>                    <td>{this.state.printPrevRounds[9][0]}</td>                    <td>{this.state.printPrevRounds[9][1]}</td>                    <td>{this.state.printPrevRounds[9][2]}</td>                    <td>{this.state.printPrevRounds[9][3]}</td>                    <td>{this.state.printPrevRounds[9][4]}</td>                </tr>            </table>            <table id="indication">                <tr>                    <td>Right / Wrong</td>                </tr>                <tr>                    <td style={indicateGreen}>{this.state.printIndication[0][0]}</td>                    <td style={indicateRed}>{this.state.printIndication[0][1]}</td>                </tr>                <tr>                    <td style={indicateGreen}>{this.state.printIndication[1][0]}</td>                    <td style={indicateRed}>{this.state.printIndication[1][1]}</td>                </tr>                <tr>                    <td style={indicateGreen}>{this.state.printIndication[2][0]}</td>                    <td style={indicateRed}>{this.state.printIndication[2][1]}</td>                </tr>                <tr>                    <td style={indicateGreen}>{this.state.printIndication[3][0]}</td>                    <td style={indicateRed}>{this.state.printIndication[3][1]}</td>                </tr>                <tr>                    <td style={indicateGreen}>{this.state.printIndication[4][0]}</td>                    <td style={indicateRed}>{this.state.printIndication[4][1]}</td>                </tr>                <tr>                    <td style={indicateGreen}>{this.state.printIndication[5][0]}</td>                    <td style={indicateRed}>{this.state.printIndication[5][1]}</td>                </tr>                <tr>                    <td style={indicateGreen}>{this.state.printIndication[6][0]}</td>                    <td style={indicateRed}>{this.state.printIndication[6][1]}</td>                </tr>                <tr>                    <td style={indicateGreen}>{this.state.printIndication[7][0]}</td>                    <td style={indicateRed}>{this.state.printIndication[7][1]}</td>                </tr>                <tr>                    <td style={indicateGreen}>{this.state.printIndication[8][0]}</td>                    <td style={indicateRed}>{this.state.printIndication[8][1]}</td>                </tr>                <tr>                    <td style={indicateGreen}>{this.state.printIndication[9][0]}</td>                    <td style={indicateRed}>{this.state.printIndication[9][1]}</td>                </tr>            </table>            <div id="palett">            <table id="pal">                <tr id="pal-center">                    <Palette addColor={this.addColor} position={0} color="black"></Palette>                    <Palette addColor={this.addColor} position={1} color="white"></Palette>                    <Palette addColor={this.addColor} position={2} color="blue"></Palette>                    <Palette addColor={this.addColor} position={3} color="red"></Palette>                    <Palette addColor={this.addColor} position={4} color="green"></Palette>                    <Palette addColor={this.addColor} position={5} color="yellow"></Palette>                    <Palette addColor={this.addColor} position={6} color="orange"></Palette>                    <Palette addColor={this.addColor} position={7} color="purple"></Palette>                </tr>            </table>            </div>                <button style={okbuttonstyle} className="ok-button" onClick={this.compareWords}>OK</button>            </div>            </div>    }});var Palette = React.createClass({     getInitialState: function(){         return {             color: this.props.color         }     },     sendColor: function(){         this.props.addColor(this.state.color, this.props.position);     },     render: function(){         return <td onClick={this.sendColor}>{this.state.color}</td>     } });var Field = React.createClass({    sendPosition: function(){        this.props.setPosition(this.props.position);    },    render: function(){        return <td onClick={this.sendPosition}>{this.props.color}</td>    }});React.render(<Board></Board>, document.getElementById("board"));